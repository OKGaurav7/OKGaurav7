
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Border, Side, Font
from datetime import datetime

# Read the master CSV file
master_df = pd.read_excel('master.xlsx')

# Read the merged data
merged_df = pd.read_excel('merged_data.xlsx')

# Merge the data based on 'Counterparty Name'
merged_output_df = pd.merge(master_df, merged_df[['Counterparty Name', 'ObligorId', 'CashScore']], on='Counterparty Name', how='left')

# Define selected columns
selected_columns = ['Counterparty Name', 'Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name', 'ObligorId', 'CashScore']

# Reorder columns and select required columns
output_df = merged_output_df[selected_columns]

# Define new columns
new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']


# Insert new columns after "Trade Price"
output_df = output_df.reindex(columns=output_df.columns.tolist()[:4] + new_columns + output_df.columns.tolist()[4:])

# Add dummy data to new columns
import random
output_df['CBBT_PX_ASK'] = [random.randint(1, 100) for _ in range(len(output_df))]
output_df['Economic Impact'] = [random.uniform(-10000, 10000) for _ in range(len(output_df))]  # Generating some negative values for testing
output_df['LQA (Liq Score)'] = [random.uniform(1000, 10000) for _ in range(len(output_df))]

# Convert dates to string format
output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')

# Calculate days elapsed
output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])
today = datetime.today()
output_df['Days Elapsed'] = (today - output_df['Value Date']).dt.days - 1

# Fill NA for empty cells in new columns
output_df[['ObligorId', 'CashScore']] = output_df[['ObligorId', 'CashScore']].fillna('NA')

# Define output filename
output_filename = 'output.xlsx'

# Write data to Excel file
output_df.to_excel(output_filename, index=False, sheet_name='Sheet1')

# Open the Excel file
wb = load_workbook(output_filename)
ws = wb.active

# Set header cells background color to RGB value (192, 0, 0)
header_fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
header_font = Font(color="FFFFFF", bold=True)  # Set font color to white and bold
for cell in ws[1]:
    cell.fill = header_fill
    cell.font = header_font

# Set conditional formatting color to RGB value (255, 199, 206)
condition_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

# Economic Impact column
for i, value in enumerate(output_df['Economic Impact'], start=2):
    cell = ws.cell(row=i, column=output_df.columns.get_loc('Economic Impact') + 1)
    if value < 0:
        cell.fill = condition_fill

# Days Elapsed column
for i, value in enumerate(output_df['Days Elapsed'], start=2):
    cell = ws.cell(row=i, column=output_df.columns.get_loc('Days Elapsed') + 1)
    if value >= 7:
        cell.fill = condition_fill

# Loop through all cells to set font color
for row in ws.iter_rows():
    for cell in row:
        if cell.fill == header_fill:
            cell.font = header_font
        elif cell.fill == condition_fill:
            cell.font = Font(color="C00000")  # Set font color to red

# Add cell borders to all cells
border = Border(left=Side(border_style='thin', color='000000'),
                right=Side(border_style='thin', color='000000'),
                top=Side(border_style='thin', color='000000'),
                bottom=Side(border_style='thin', color='000000'))

for row in ws.iter_rows():
    for cell in row:
        cell.border = border

# Set column width to fit the content optimally
for column in ws.columns:
    max_length = 0
    column_values = [cell.value for cell in column]
    max_length = max(len(str(cell)) for cell in column_values if cell is not None)
    column_letter = column[0].column_letter
    ws.column_dimensions[column_letter].width = max_length + 2  # Adding some extra space

# Save the modified Excel file
wb.save(output_filename)

# Save DataFrame to CSV file
output_df.to_csv('output.csv', index=False)

Don't do anything 

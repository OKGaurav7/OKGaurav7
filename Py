import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from datetime import datetime
import random

# Read the master CSV file
master_df = pd.read_excel('master.xlsx')

# Read the merged data
merged_df = pd.read_excel('merged_data.xlsx')

# Merge the data based on 'Counterparty Name'
merged_output_df = pd.merge(master_df, merged_df[['Counterparty Name', 'ObligorId', 'CashScore']], on='Counterparty Name', how='left')

# Define selected columns
selected_columns = ['Counterparty Name', 'Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name', 'ObligorId', 'CashScore']

# Reorder columns and select required columns
output_df = merged_output_df[selected_columns]

# Define new columns
new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']

# Define the desired column order
custom_column_order = ['ObligorId','Counterparty Name', 'CashScore','Operation Type', 'Trade Date', 'Trade Price','CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)','Value Date','Days Elapsed','Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name']

# Insert new columns at specific position
for i, col in enumerate(new_columns, start=1):
    output_df.insert(output_df.columns.get_loc('ObligorId') + i, col, '')

# Add dummy data to new columns
output_df['CBBT_PX_ASK'] = [random.randint(1, 100) for _ in range(len(output_df))]
output_df['Economic Impact'] = [random.uniform(-10000, 10000) for _ in range(len(output_df))]  # Generating some negative values for testing
output_df['LQA (Liq Score)'] = [random.uniform(1000, 10000) for _ in range(len(output_df))]

# Convert dates to string format
output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')

# Calculate days elapsed
output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])
today = datetime.today()
output_df['Days Elapsed'] = (today - output_df['Value Date']).dt.days - 1

# Fill NA for empty cells in new columns
output_df[['ObligorId', 'CashScore']] = output_df[['ObligorId', 'CashScore']].fillna('NA')

# Reorder columns based on custom_column_order
output_df = output_df[custom_column_order]

# Define output filename
output_filename = 'output.xlsx'

# Write data to Excel file with separate sheets for Buy and Sell data
with pd.ExcelWriter(output_filename) as writer:
    output_df.to_excel(writer, index=False, sheet_name='All Data')
    
    # Filter data where operation type is Buy
    buy_df = output_df[output_df['Operation Type'].str.contains('BUY')]
    buy_df.to_excel(writer, index=False, sheet_name='Buy Data')
    
    # Filter data where operation type is Sell
    sell_df = output_df[output_df['Operation Type'].str.contains('SELL')]
    sell_df.to_excel(writer, index=False, sheet_name='Sell Data')

# Apply styling and formatting for each sheet
wb = load_workbook(output_filename)
for sheet_name in wb.sheetnames:
    ws = wb[sheet_name]
    
    # Set header cells background color to RGB value (192, 0, 0)
    header_fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
    header_font = Font(color="FFFFFF", bold=True)  # Set font color to white and bold
    for cell in ws[1]:
        cell.fill = header_fill
        cell.font = header_font

    # Set conditional formatting color to RGB value (255, 199, 206)
    condition_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Add cell borders to all cells
    border = Border(left=Side(border_style='thin', color='000000'),
                    right=Side(border_style='thin', color='000000'),
                    top=Side(border_style='thin', color='000000'),
                    bottom=Side(border_style='thin', color='000000'))

    for row in ws.iter_rows():
        for cell in row:
            cell.border = border
            cell.alignment = Alignment(horizontal='right')  # Align cell content to the right

    # Loop through all cells to set font color
    for row in ws.iter_rows():
        for cell in row:
            if cell.fill == header_fill:
                cell.font = header_font

# Save the modified Excel file
wb.save(output_filename)

def generate_output():
    # Read data from master.xlsx, Takara.xlsx, and prodman.xlsx
    master = pd.read_excel('master.xlsx')
    Takara = pd.read_excel('Takara.xlsx')
    prodman = pd.read_excel('prodman.xlsx')

    # Merge data from prodman.xlsx and takara.xlsx based on 'obligorId' and 'currentObligorId'
    abc_df = pd.merge(master, Takara, left_on='Counterparty RDM Id', right_on='externalId', how='left')
    merged_output_df = pd.merge(abc_df, prodman, left_on='currentObligorRdmId', right_on='ObligorId', how='left')

    # Define selected columns
    selected_columns = ['Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name','currentObligorRdmId', 'currentObligorFullName', 'CashScore']

    # Reorder columns and select required columns
    output_df = merged_output_df[selected_columns]
    output_df=output_df.drop_duplicates()
    new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']
    custom_column_order = ['currentObligorRdmId','currentObligorFullName', 'CashScore','Operation Type', 'Trade Date', 'Trade Price','CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)','Value Date','Days Elapsed','Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name']

    
    for i, col in enumerate(new_columns, start=1):
        output_df.insert(output_df.columns.get_loc('currentObligorRdmId') + i, col, '')

    l1=["PX_DISC_MID","","USD","EUR","AUD","JPY","GBP"]
    l2=["","","1",'=BDP("EURUSD BGN Curncy","PX_CLOSE_1D")','=BDP("AUDUSD BGN Curncy","PX_CLOSE_1D")','=BDP("JPYUSD BGN Curncy","PX_CLOSE_1D")','=BDP("GBPUSD BGN Curncy","PX_CLOSE_1D")']

    exchange=pd.DataFrame()
    exchange["one"]=l1
    exchange["two"]=l2

    output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')

    
    #output_df['Economic Impact'] = output_df['Economic Impact'].astype(int)
    #output_df['LQA (Liq Score)'] = output_df['LQA (Liq Score)'].astype(int)
    output_df['Trade Price'] = output_df['Trade Price'].round(2)

    # Calculate days elapsed
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])
    today = datetime.today()
    output_df['Days Elapsed'] = (today - output_df['Value Date']).dt.days - 1

    # Fill NA for empty cells in new columns
    output_df[['currentObligorRdmId', 'CashScore']] = output_df[['currentObligorRdmId', 'CashScore']].fillna('NA')

    # Reorder columns based on custom_column_order
    output_df = output_df[custom_column_order]

    output_df['CBBT_PX_ASK'] = "=" + "BDP(" + output_df['ISIN Primary Instrument Reference'] + " Corp," + "G1" + ")"
    output_df['LQA (Liq Score)' ]= "=" + "BDP(" + output_df['ISIN Primary Instrument Reference'] + " Corp," + '"LQA_LIQUIDITY_SCORE")'

    # Define output filename
    output_filename = 'output.xlsx'

    # Write data to Excel file
    with pd.ExcelWriter(output_filename) as writer:
        output_df.to_excel(writer, index=False, sheet_name='All Data')

        # Filter data where operation type is Buy
        buy_df = output_df[output_df['Operation Type'].str.contains('BUY')]
        buy_df.to_excel(writer, index=False, sheet_name='Buy Data')

        # Filter data where operation type is Sell
        sell_df = output_df[output_df['Operation Type'].str.contains('SELL')]
        sell_df.to_excel(writer, index=False, sheet_name='Sell Data')

    # Open the Excel file
    wb = load_workbook(output_filename)
    for sheet in wb.sheetnames:
        ws = wb[sheet]   
    # Apply styling to each sheet
    for sheet in wb.sheetnames:
        ws = wb[sheet]
        apply_styling(ws)

        # Apply conditional formatting and adjust column width for 'CashScore'
        cash_score_column = None
        for cell in ws[1]:
            if cell.value == 'CashScore':
                cash_score_column = cell.column
                break

        if cash_score_column:
            ws.column_dimensions[get_column_letter(cash_score_column)].width = 10  

        # Apply conditional formatting and adjust column width for 'Operation Type'
        operation_type_column = None
        for cell in ws[1]:
            if cell.value == 'Operation Type':
                operation_type_column = cell.column
                break

        if operation_type_column:
            ws.column_dimensions[get_column_letter(operation_type_column)].width = 15  

        # Apply conditional formatting and adjust column width for 'Trade Date'
        trade_date_column = None
        for cell in ws[1]:
            if cell.value == 'Trade Date':
                trade_date_column = cell.column
                break

        if trade_date_column:
            ws.column_dimensions[get_column_letter(trade_date_column)].width = 10  
        
        # Apply conditional formatting to column "Trade Price"
        trade_price_column = None
        for cell in ws[1]:
            if cell.value == 'Trade Price':
                trade_price_column = cell.column
                break

        if trade_price_column:
            ws.column_dimensions[get_column_letter(trade_price_column)].width = 11  

        # Apply conditional formatting and adjust column width for 'Value Date'
        value_date_column = None
        for cell in ws[1]:
            if cell.value == 'Value Date':
                value_date_column = cell.column
                break

        if value_date_column:
            ws.column_dimensions[get_column_letter(value_date_column)].width = 12  

        # Apply conditional formatting and adjust column width for 'Primary Original Quantity'
        quantity_column = None
        for cell in ws[1]:
            if cell.value == 'Primary Original Quantity':
                quantity_column = cell.column
                break

        if quantity_column:
            ws.column_dimensions[get_column_letter(quantity_column)].width = 25  

        # Apply conditional formatting and adjust column width for 'Settlement Instrument Name'
        settlement_column = None
        for cell in ws[1]:
            if cell.value == 'Settlement Instrument Name':
                settlement_column = cell.column
                break

        if settlement_column:
            ws.column_dimensions[get_column_letter(settlement_column)].width = 27  

        isin_column = None
        for cell in ws[1]:
            if cell.value == 'ISIN Primary Instrument Reference':
                isin_column = cell.column
                break

        if isin_column:
            ws.column_dimensions[get_column_letter(isin_column)].width = 32  
        instrument_name_column = None
        for cell in ws[1]:
            if cell.value == 'Primary Instrument Long Name':
                instrument_name_column = cell.column
                break

        if instrument_name_column:
            ws.column_dimensions[get_column_letter(instrument_name_column)].width = 67 

        # Apply conditional formatting and adjust column width for 'SMO Trade Reference'
        smo_trade_column = None
        for cell in ws[1]:
            if cell.value == 'SMO Trade Reference':
                smo_trade_column = cell.column
                break

        if smo_trade_column:
            ws.column_dimensions[get_column_letter(smo_trade_column)].width = 20  

        # Apply conditional formatting and adjust column width for 'Internal Status Narrative'
        internal_status_column = None
        for cell in ws[1]:
            if cell.value == 'Internal Status Narrative':
                internal_status_column = cell.column
                break

        if internal_status_column:
            ws.column_dimensions[get_column_letter(internal_status_column)].width = 56  
        
        sales_person_column = None
        for cell in ws[1]:
            if cell.value == 'Sales Person Name':
                sales_person_column = cell.column
                break
        if sales_person_column:
            ws.column_dimensions[get_column_letter(sales_person_column)].width = 19  
    # Save the modified Excel file
    wb.save(output_filename)

import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import PatternFill

# Read the master CSV file
master_df = pd.read_csv('master.csv')

# Select the specified columns
selected_columns = ['Counterparty Name', 'Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name']

# Create a new DataFrame with only the selected columns
output_df = master_df[selected_columns]

# Define new columns
new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']

# Insert new columns after "Trade Price"
output_df = output_df.reindex(columns=output_df.columns.tolist()[:4] + new_columns + output_df.columns.tolist()[4:])

# Add dummy data to new columns
import random
output_df['CBBT_PX_ASK'] = [random.randint(1, 100) for _ in range(len(output_df))]
output_df['Economic Impact'] = [random.uniform(1000, 10000) for _ in range(len(output_df))]
output_df['LQA (Liq Score)'] = [random.uniform(1000, 10000) for _ in range(len(output_df))]
output_df['Days Elapsed'] = [random.randint(1, 30) for _ in range(len(output_df))]

# Convert date columns to the desired format
output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')

# Calculate days elapsed
from datetime import datetime
today = datetime.today()
output_df['Days Elapsed'] = (today - pd.to_datetime(output_df['Value Date'])).dt.days - 1

# Create a new Excel workbook
wb = Workbook()
ws = wb.active

# Write headers with red fill color
for col_num, value in enumerate(output_df.columns.values, 1):
    cell = ws.cell(row=1, column=col_num, value=str(value))
    red_fill = PatternFill(start_color='FF0000', end_color='FF0000', fill_type='solid')
    cell.fill = red_fill

# Load DataFrame into worksheet
from openpyxl.utils.dataframe import dataframe_to_rows
for r_idx, row in enumerate(dataframe_to_rows(output_df, index=False, header=False), 1):
    for c_idx, value in enumerate(row, 1):
        ws.cell(row=r_idx+1, column=c_idx, value=value)

# Save the Excel file
wb.save('output.xlsx')

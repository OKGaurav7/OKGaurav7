import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from datetime import datetime
import random

def apply_styling(ws, header_fill_color="C00000", header_font_color="FFFFFF", condition_fill_color="FFC7CE", border_color="000000"):
    # Set header cells background color
    header_fill = PatternFill(start_color=header_fill_color, end_color=header_fill_color, fill_type="solid")
    header_font = Font(color=header_font_color, bold=True)  # Set font color and bold

    # Set conditional formatting color
    condition_fill = PatternFill(start_color=condition_fill_color, end_color=condition_fill_color, fill_type="solid")

    # Add cell borders
    border = Border(left=Side(border_style='thin', color=border_color),
                    right=Side(border_style='thin', color=border_color),
                    top=Side(border_style='thin', color=border_color),
                    bottom=Side(border_style='thin', color=border_color))

    # Apply styles to header cells
    for cell in ws[1]:
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment=Alignment(horizontal="center")
        
    # Apply conditional formatting to "Economic Impact" column
    economic_impact_col = None
    for cell in ws[1]:
        if cell.value == 'Economic Impact':
            economic_impact_col = cell.column
            break

    if economic_impact_col:
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == economic_impact_col:
                    if cell.value is not None and cell.value < 0:
                        cell.fill = condition_fill
    # Apply conditional formatting to "Days Elapsed" column
    days_elapsed_col = None
    for cell in ws[1]:
        if cell.value == 'Days Elapsed':
            days_elapsed_col = cell.column
            break
    if days_elapsed_col:
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == days_elapsed_col:
                    if cell.value is not None and cell.value > 7:
                        cell.fill = condition_fill
    # Apply borders to all cells
    for row in ws.iter_rows():
        for cell in row:
            cell.border = border
    # Format "Trade Date" and "Value Date" columns as short date
    for col in ws.iter_cols(min_col=1, max_col=ws.max_column):
        if ws.cell(row=1, column=col[0].column).value in ["Trade Date", "Value Date"]:
            for cell in col:
                cell.number_format = 'yyyy-mm-dd'

def generate_output():
    # Read data from master.xlsx, Takara.xlsx, and prodman.xlsx
    master = pd.read_excel('master.xlsx')
    Takara = pd.read_excel('Takara.xlsx')
    prodman = pd.read_excel('prodman.xlsx')

    # Merge data from prodman.xlsx and takara.xlsx based on 'obligorId' and 'currentObligorId'
    abc_df = pd.merge(master, Takara, left_on='Counterparty RDM Id', right_on='externalId', how='left')
    merged_output_df = pd.merge(abc_df, prodman, left_on='currentObligorRdmId', right_on='ObligorId', how='left')

    # Define selected columns
    selected_columns = ['Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name','currentObligorRdmId', 'currentObligorFullName', 'CashScore']

    # Reorder columns and select required columns
    output_df = merged_output_df[selected_columns]
    output_df=output_df.drop_duplicates()
    new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']
    custom_column_order = ['currentObligorRdmId','currentObligorFullName', 'CashScore','Operation Type', 'Trade Date', 'Trade Price','CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)','Value Date','Days Elapsed','Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name']

    
    for i, col in enumerate(new_columns, start=1):
        output_df.insert(output_df.columns.get_loc('currentObligorRdmId') + i, col, '')

   
    #output_df['CBBT_PX_ASK'] = [random.randint(1, 100) for _ in range(len(output_df))]
    output_df['Economic Impact'] = [random.uniform(-10000, 10000) for _ in range(len(output_df))]  # Generating some negative values for testing
    output_df['LQA (Liq Score)'] = [random.uniform(1000, 10000) for _ in range(len(output_df))]

    # Convert dates
    output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')

    
    #output_df['Economic Impact'] = output_df['Economic Impact'].astype(int)
    #output_df['LQA (Liq Score)'] = output_df['LQA (Liq Score)'].astype(int)
    output_df['Trade Price'] = output_df['Trade Price'].round(2)

    # Calculate days elapsed
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])
    today = datetime.today()
    output_df['Days Elapsed'] = (today - output_df['Value Date']).dt.days - 1

    # Fill NA for empty cells in new columns
    output_df[['currentObligorRdmId', 'CashScore']] = output_df[['currentObligorRdmId', 'CashScore']].fillna('NA')

    # Reorder columns based on custom_column_order
    output_df = output_df[custom_column_order]

    output_df['CBBT_PX_ASK'] = "=" + "BDP(" + output_df['ISIN Primary Instrument Reference'] + " Corp," + "\$"+"G"+ "$1" + ")"
    output_df['LQA (Liq Score)']= "="+"BDP("+ output_df['ISIN Primary Instrument Reference'] + " Corp," + '"LQA_LIQUIDITY_SCORE")'

    # Define output filename
    output_filename = 'output.xlsx'

    # Write data to Excel file
    with pd.ExcelWriter(output_filename) as writer:
        output_df.to_excel(writer, index=False, sheet_name='All Data')

        # Filter data where operation type is Buy
        buy_df = output_df[output_df['Operation Type'].str.contains('BUY')]
        buy_df.to_excel(writer, index=False, sheet_name='Buy Data')

        # Filter data where operation type is Sell
        sell_df = output_df[output_df['Operation Type'].str.contains('SELL')]
        sell_df.to_excel(writer, index=False, sheet_name='Sell Data')

    # Open the Excel file
    wb = load_workbook(output_filename)
    for sheet in wb.sheetnames:
        ws = wb[sheet]   
    # Apply styling to each sheet
    for sheet in wb.sheetnames:
        ws = wb[sheet]
        apply_styling(ws)

        # Apply conditional formatting and adjust column width for 'currentObligorRdmId'
        obligor_id_column = None
        for cell in ws[1]:
            if cell.value == 'currentObligorRdmId':
                obligor_id_column = cell.column
                break

        if obligor_id_column:
            ws.column_dimensions[get_column_letter(obligor_id_column)].width = 20

        # Apply conditional formatting and adjust column width for 'currentObligorFullName'
        obligor_name_column = None
        for cell in ws[1]:
            if cell.value == 'currentObligorFullName':
                obligor_name_column = cell.column
                break

        if obligor_name_column:
            ws.column_dimensions[get_column_letter(obligor_name_column)].width = 43  

        # Apply conditional formatting and adjust column width for 'CashScore'
        cash_score_column = None
        for cell in ws[1]:
            if cell.value == 'CashScore':
                cash_score_column = cell.column
                break

        if cash_score_column:
            ws.column_dimensions[get_column_letter(cash_score_column)].width = 10  

        # Apply conditional formatting and adjust column width for 'Operation Type'
        operation_type_column = None
        for cell in ws[1]:
            if cell.value == 'Operation Type':
                operation_type_column = cell.column
                break

        if operation_type_column:
            ws.column_dimensions[get_column_letter(operation_type_column)].width = 15  

        # Apply conditional formatting and adjust column width for 'Trade Date'
        trade_date_column = None
        for cell in ws[1]:
            if cell.value == 'Trade Date':
                trade_date_column = cell.column
                break

        if trade_date_column:
            ws.column_dimensions[get_column_letter(trade_date_column)].width = 10  

        
        # Apply conditional formatting to column "Trade Price"
        trade_price_column = None
        for cell in ws[1]:
            if cell.value == 'Trade Price':
                trade_price_column = cell.column
                break

        if trade_price_column:
            ws.column_dimensions[get_column_letter(trade_price_column)].width = 11  

        # Apply conditional formatting and adjust column width for 'Value Date'
        value_date_column = None
        for cell in ws[1]:
            if cell.value == 'Value Date':
                value_date_column = cell.column
                break

        if value_date_column:
            ws.column_dimensions[get_column_letter(value_date_column)].width = 12  

        # Apply conditional formatting and adjust column width for 'Primary Original Quantity'
        quantity_column = None
        for cell in ws[1]:
            if cell.value == 'Primary Original Quantity':
                quantity_column = cell.column
                break

        if quantity_column:
            ws.column_dimensions[get_column_letter(quantity_column)].width = 25  

        # Apply conditional formatting and adjust column width for 'Settlement Instrument Name'
        settlement_column = None
        for cell in ws[1]:
            if cell.value == 'Settlement Instrument Name':
                settlement_column = cell.column
                break

        if settlement_column:
            ws.column_dimensions[get_column_letter(settlement_column)].width = 27  

        # Apply conditional formatting and adjust column width for 'ISIN Primary Instrument Reference'
        isin_column = None
        for cell in ws[1]:
            if cell.value == 'ISIN Primary Instrument Reference':
                isin_column = cell.column
                break

        if isin_column:
            ws.column_dimensions[get_column_letter(isin_column)].width = 32  

        # Apply conditional formatting and adjust column width for 'Primary Instrument Long Name'
        instrument_name_column = None
        for cell in ws[1]:
            if cell.value == 'Primary Instrument Long Name':
                instrument_name_column = cell.column
                break

        if instrument_name_column:
            ws.column_dimensions[get_column_letter(instrument_name_column)].width = 67 

        # Apply conditional formatting and adjust column width for 'SMO Trade Reference'
        smo_trade_column = None
        for cell in ws[1]:
            if cell.value == 'SMO Trade Reference':
                smo_trade_column = cell.column
                break

        if smo_trade_column:
            ws.column_dimensions[get_column_letter(smo_trade_column)].width = 20  

        # Apply conditional formatting and adjust column width for 'Internal Status Narrative'
        internal_status_column = None
        for cell in ws[1]:
            if cell.value == 'Internal Status Narrative':
                internal_status_column = cell.column
                break

        if internal_status_column:
            ws.column_dimensions[get_column_letter(internal_status_column)].width = 56  
        
        sales_person_column = None
        for cell in ws[1]:
            if cell.value == 'Sales Person Name':
                sales_person_column = cell.column
                break
        if sales_person_column:
            ws.column_dimensions[get_column_letter(sales_person_column)].width = 19  

        

    # Save the modified Excel file
    wb.save(output_filename)

def generate_new_excel():
    # Read the output.xlsx file into a DataFrame
    output_df = pd.read_excel('output.xlsx', sheet_name='All Data')

    # Extract unique counterparty names and corresponding obligorIds
    unique_counterparties = output_df[['currentObligorFullName', 'currentObligorRdmId']].drop_duplicates()

    # Create an empty list to store DataFrames for each counterparty
    dfs = []

    # Initialize variable for sum of total fails
    total_fails_sum = 0

    # Iterate over unique counterparty names and obligorIds
    for index, row in unique_counterparties.iterrows():
        obligor_id = row['currentObligorRdmId']
        counterparty = row['currentObligorFullName']

        cp_data = output_df[output_df['currentObligorFullName'] == counterparty]

        # Calculate values for each date range
        vd = len(cp_data[cp_data['Days Elapsed'] == 0])
        vd_plus_1 = len(cp_data[cp_data['Days Elapsed'] == 1])
        vd_plus_2 = len(cp_data[cp_data['Days Elapsed'] == 2])
        vd_plus_3 = len(cp_data[cp_data['Days Elapsed'] == 3])
        vd_plus_4 = len(cp_data[cp_data['Days Elapsed'] == 4])
        vd_plus_5 = len(cp_data[cp_data['Days Elapsed'] == 5])
        vd_plus_7 = len(cp_data[cp_data['Days Elapsed'] == 7])
        vd_gt_7 = len(cp_data[cp_data['Days Elapsed'] > 7])

        # Calculate total fails
        total_fails = vd_plus_1 + vd_plus_2 + vd_plus_3 + vd_plus_4 + vd_plus_5 + vd_plus_7 + vd_gt_7
        total_fails_sum += total_fails

        # Create a DataFrame for the current counterparty
        cp_df = pd.DataFrame({'currentObligorRdmId': [obligor_id],'currentObligorFullName': [counterparty],'Vd': [vd],'Vd+1': [vd_plus_1],'Vd+2': [vd_plus_2],'Vd+3': [vd_plus_3],
            'Vd+4': [vd_plus_4],
            'Vd+5': [vd_plus_5],
            'Vd+7': [vd_plus_7],
            'Vd>7': [vd_gt_7],
            'Total Fails': [total_fails]
        })

        # Append the DataFrame to the list
        dfs.append(cp_df)

    # Concatenate all DataFrames in the list
    new_excel_df = pd.concat(dfs, ignore_index=True)

    # Append the sum of total fails at the end
    new_excel_df.loc[len(new_excel_df)] = ['', '', '', '', '', '', '', '', '', 'Total', total_fails_sum]

    # Save the new DataFrame to the existing Excel file without overwriting existing sheets
    output_filename = 'output.xlsx'
    with pd.ExcelWriter(output_filename, mode='a', engine='openpyxl') as writer:
        new_excel_df.to_excel(writer, index=False, sheet_name='New Data')

    # Open the Excel file
    wb = load_workbook(output_filename)
    ws = wb['New Data']

    # Apply styling
    apply_styling(ws)

    # Apply conditional formatting to the last cell of "Total Fails" column
    last_row = ws.max_row
    total_fails_cell = ws.cell(row=last_row, column=ws.max_column)
    total_fails_cell.fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
    total_fails_cell.font = Font(color="FFFFFF", bold=True)

    # Apply conditional formatting to the last cell of "Vd>7" column
    last_row = ws.max_row
    vd_gt_7_cell = ws.cell(row=last_row, column=ws.max_column - 1)
    vd_gt_7_cell.fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
    vd_gt_7_cell.font = Font(color="FFFFFF", bold=True)

    new_excel_df = new_excel_df.replace({0: '-'})

    # Apply conditional formatting to column "currentObligerRdmId"
    obligor_id_column = None
    for cell in ws[1]:
        if cell.value == 'currentObligerRdmId':
            obligor_id_column = cell.column
            break

    if obligor_id_column:
        ws.column_dimensions[get_column_letter(obligor_id_column)].width =20 

    # Apply conditional formatting to column "currentObligerFullName"
    obligor_name_column = None
    for cell in ws[1]:
        if cell.value == 'currentObligerFullName':
            obligor_name_column = cell.column
            break

    if obligor_name_column:
        ws.column_dimensions[get_column_letter(obligor_name_column)].width = 42  

    

    # Apply conditional formatting to column "Vd"
    vd_column = None
    for cell in ws[1]:
        if cell.value == 'Vd':
            vd_column = cell.column
            break

    if vd_column:
        ws.column_dimensions[get_column_letter(vd_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Apply conditional formatting to column "Vd+1"
    vd_plus_1_column = None
    for cell in ws[1]:
        if cell.value == 'Vd+1':
            vd_plus_1_column = cell.column
            break

    if vd_plus_1_column:
        ws.column_dimensions[get_column_letter(vd_plus_1_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_plus_1_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Apply conditional formatting to column "Vd+2"
    vd_plus_2_column = None
    for cell in ws[1]:
        if cell.value == 'Vd+2':
            vd_plus_2_column = cell.column
            break

    if vd_plus_2_column:
        ws.column_dimensions[get_column_letter(vd_plus_2_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_plus_2_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Apply conditional formatting to column "Vd+3"
    vd_plus_3_column = None
    for cell in ws[1]:
        if cell.value == 'Vd+3':
            vd_plus_3_column = cell.column
            break

    if vd_plus_3_column:
        ws.column_dimensions[get_column_letter(vd_plus_3_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_plus_3_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Apply conditional formatting to column "Vd+4"
    vd_plus_4_column = None
    for cell in ws[1]:
        if cell.value == 'Vd+4':
            vd_plus_4_column = cell.column
            break

    if vd_plus_4_column:
        ws.column_dimensions[get_column_letter(vd_plus_4_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_plus_4_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Apply conditional formatting to column "Vd+5"
    vd_plus_5_column = None
    for cell in ws[1]:
        if cell.value == 'Vd+5':
            vd_plus_5_column = cell.column
            break

    if vd_plus_5_column:
        ws.column_dimensions[get_column_letter(vd_plus_5_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_plus_5_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Apply conditional formatting to column "Vd+6"
    vd_plus_6_column = None
    for cell in ws[1]:
        if cell.value == 'Vd+6':
            vd_plus_6_column = cell.column
            break

    if vd_plus_6_column:
        ws.column_dimensions[get_column_letter(vd_plus_6_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_plus_6_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Apply conditional formatting to column "Vd+7"
    vd_plus_7_column = None
    for cell in ws[1]:
        if cell.value == 'Vd+7':
            vd_plus_7_column = cell.column
            break

    if vd_plus_7_column:
        ws.column_dimensions[get_column_letter(vd_plus_7_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_plus_7_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    # Apply conditional formatting to column "Vd>7"
    vd_gt_7_column = None
    for cell in ws[1]:
        if cell.value == 'Vd>7':
            vd_gt_7_column = cell.column
            break

    if vd_gt_7_column:
        ws.column_dimensions[get_column_letter(vd_gt_7_column)].width=6.5
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == vd_gt_7_column:
                    if isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

    wb.save(output_filename)

generate_output()
generate_new_excel()

import pandas as pd
import openpyxl
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from datetime import datetime

def apply_styling(ws, header_fill_color="C00000", header_font_color="FFFFFF", condition_fill_color="FFC7CE", border_color="000000"):
    # Set header cells background color
    header_fill = PatternFill(start_color=header_fill_color, end_color=header_fill_color, fill_type="solid")
    header_font = Font(color=header_font_color, bold=True)  # Set font color and bold

    # Set conditional formatting color
    condition_fill = PatternFill(start_color=condition_fill_color, end_color=condition_fill_color, fill_type="solid")

    # Add cell borders
    border = Border(left=Side(border_style='thin', color=border_color),
                    right=Side(border_style='thin', color=border_color),
                    top=Side(border_style='thin', color=border_color),
                    bottom=Side(border_style='thin', color=border_color))

    # Apply styles to header cells
    for cell in ws[1]:
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment=Alignment(horizontal="center")
        if cell.value=='currentObligorRdmId':
            ws.column_dimensions[get_column_letter(cell.column)].width = 20

        elif cell.value=='currentObligorFullName':
            ws.column_dimensions[get_column_letter(cell.column)].width = 43        
        
    # Apply conditional formatting to "Economic Impact" column
    economic_impact_col = None
    for cell in ws[1]:
        if cell.value == 'Economic Impact':
            economic_impact_col = cell.column
            break

    if economic_impact_col:
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == economic_impact_col:
                    if cell.value is not None and cell.value < 0:
                        cell.fill = condition_fill
    # Apply conditional formatting to "Days Elapsed" column
    days_elapsed_col = None
    for cell in ws[1]:
        if cell.value == 'Days Elapsed':
            days_elapsed_col = cell.column
            break
    if days_elapsed_col:
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == days_elapsed_col:
                    if cell.value is not None and cell.value > 7:
                        cell.fill = condition_fill
    # Apply borders to all cells
    for row in ws.iter_rows():
        for cell in row:
            if cell.value is not None:
                cell.border = border
    # Format "Trade Date" and "Value Date" columns as short date
    for col in ws.iter_cols(min_col=1, max_col=ws.max_column):
        if ws.cell(row=1, column=col[0].column).value in ["Trade Date", "Value Date"]:
            for cell in col:
                cell.number_format = 'yyyy-mm-dd'

def generate_output():
    # Read data from master.xlsx, Takara.xlsx, and prodman.xlsx
    master = pd.read_excel('master.xlsx')
    Takara = pd.read_excel('Takara.xlsx')
    prodman = pd.read_excel('prodman.xlsx')

    # Merge data from prodman.xlsx and takara.xlsx based on 'obligorId' and 'currentObligorId'
    abc_df = pd.merge(master, Takara, left_on='Counterparty RDM Id', right_on='externalId', how='left')
    merged_output_df = pd.merge(abc_df, prodman, left_on='currentObligorRdmId', right_on='ObligorId', how='left')

    # Define selected columns
    selected_columns = ['Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name','currentObligorRdmId', 'currentObligorFullName', 'CashScore']

    # Reorder columns and select required columns
    output_df = merged_output_df[selected_columns]
    output_df=output_df.drop_duplicates()
    new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']
    custom_column_order = ['currentObligorRdmId','currentObligorFullName', 'CashScore','Operation Type', 'Trade Date', 'Trade Price','CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)','Value Date','Days Elapsed','Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name']

    
    for i, col in enumerate(new_columns, start=1):
        output_df.insert(output_df.columns.get_loc('currentObligorRdmId') + i, col, '')

    output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')

    
    #output_df['Economic Impact'] = output_df['Economic Impact'].astype(int)
    #output_df['LQA (Liq Score)'] = output_df['LQA (Liq Score)'].astype(int)
    output_df['Trade Price'] = output_df['Trade Price'].round(2)

    # Calculate days elapsed
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])
    today = datetime.today()
    output_df['Days Elapsed'] = (today - output_df['Value Date']).dt.days - 1

    # Fill NA for empty cells in new columns
    output_df[['currentObligorRdmId', 'CashScore']] = output_df[['currentObligorRdmId', 'CashScore']].fillna('NA')

    # Reorder columns based on custom_column_order
    output_df = output_df[custom_column_order]

    output_df['CBBT_PX_ASK'] = "=" + "BDP(" + output_df['ISIN Primary Instrument Reference'] + " Corp," + "G1" + ")"
    output_df['LQA (Liq Score)' ]= "=" + "BDP(" + output_df['ISIN Primary Instrument Reference'] + " Corp," + '"LQA_LIQUIDITY_SCORE")'
    #output_df['Economic Impact']="=" +"("+"("+"-("+ output_df['CBBT_PX_ASK']+ "-" +output_df['Trade Price'].apply(str) + ")" + ")" + "/100" + "*" + output_df['Primary Original Quantity'].apply(str)+ "*" + "VLOOKUP("+ output_df['Settlement Instrument Name'] +","+ "T1:U5"+","+ "2" +","+"FALSE)"

    # Define output filename
    output_filename = 'output.xlsx'

    # Write data to Excel file
    with pd.ExcelWriter(output_filename) as writer:
        output_df.to_excel(writer, index=False, sheet_name='All Data')

        # Filter data where operation type is Buy
        buy_df = output_df[output_df['Operation Type'].str.contains('BUY')]
        buy_df.to_excel(writer, index=False, sheet_name='Buy Data')

        # Filter data where operation type is Sell
        sell_df = output_df[output_df['Operation Type'].str.contains('SELL')]
        sell_df.to_excel(writer, index=False, sheet_name='Sell Data')

    # Open the Excel file
    wb = load_workbook(output_filename)

    # Apply the Economic Impact formula to all sheets
    for sheet in wb.sheetnames:
        ws = wb[sheet]
        vlookup_range = "$T$1:$U$5"

        for row in range(1, ws.max_row + 1):
            # Skip the header row
            if row == 1:
                continue
            
            # Set the formula for the "Economic Impact" column
            formula = f"=(-(G{row}-F{row}))/100*L{row}*VLOOKUP(M{row},{vlookup_range},2,FALSE)"
            ws[f'H{row}'] = formula

    # Save the modified Excel file
    wb.save(output_filename)

# Call the function to generate the output
generate_output()

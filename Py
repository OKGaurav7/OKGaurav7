import pandas as pd
import os
import glob

import openpyxl
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from datetime import datetime
import random
import pathlib
import win32com.client as client
from PIL import ImageGrab
import time


def get_latest_file(directory, extension):
    files = glob.glob(os.path.join(directory, f'*.{extension}'))
    latest_file = max(files, key=os.path.getmtime)
    return latest_file

def apply_styling(ws, header_fill_color="C00000", header_font_color="FFFFFF", condition_fill_color="FFC7CE", border_color="000000"):
    # Set header cells background color
    header_fill = PatternFill(start_color=header_fill_color, end_color=header_fill_color, fill_type="solid")
    header_font = Font(color=header_font_color, bold=True)

    # Set conditional formatting color
    condition_fill = PatternFill(start_color=condition_fill_color, end_color=condition_fill_color, fill_type="solid")

    # Add cell borders
    border = Border(left=Side(border_style='thin', color=border_color),
                    right=Side(border_style='thin', color=border_color),
                    top=Side(border_style='thin', color=border_color),
                    bottom=Side(border_style='thin', color=border_color))

    # Apply styles to header cells
    for cell in ws[1]:
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment=Alignment(horizontal="center",vertical="center",wrap_text=True)
        if cell.value=='Client':
            ws.column_dimensions[get_column_letter(cell.column)].width = 42
    
    days_elapsed_col = None
    for cell in ws[1]:
        if cell.value == 'Days Elapsed':
            days_elapsed_col = cell.column
            break
    if days_elapsed_col:
        for row in ws.iter_rows(min_row=2):
            for cell in row:
                if cell.column == days_elapsed_col:
                    if cell.value is not None and cell.value > 7:
                        cell.fill = condition_fill

    # Format "Trade Date" and "Value Date" columns as short date
    for col in ws.iter_cols(min_col=1, max_col=ws.max_column):
        if ws.cell(row=1, column=col[0].column).value in ["Trade Date", "Value Date"]:
            for cell in col:
                cell.number_format = 'yyyy-mm-dd'


def generate_output(master_path, takara_path, prodman_path):
    master = pd.read_csv(master_path, on_bad_lines='skip')
    Takara = pd.read_excel(takara_path)
    prodman = pd.read_excel(prodman_path)
    abc_df = pd.merge(master, Takara, left_on='Counterparty RDM Id', right_on='externalId', how='left')
    merged_output_df = pd.merge(abc_df, prodman, left_on='currentObligorRdmId', right_on='ObligorId', how='left')
    Final_df=master.copy()
   
    selected_columns = ['Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Open Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name','currentObligorRdmId', 'currentObligorFullName', 'CashScore']

    output_df = merged_output_df[selected_columns]
    output_df=output_df.drop_duplicates()
    new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']
    output_df.rename(columns={'currentObligorRdmId':'Oblg Id', 'currentObligorFullName':'Client'},inplace=True)
    custom_column_order = ['Oblg Id','Client', 'CashScore','Operation Type', 'Trade Date', 'Trade Price','CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)','Value Date','Days Elapsed','Primary Open Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name']
    
    for i, col in enumerate(new_columns, start=1):
        output_df.insert(output_df.columns.get_loc('Oblg Id') + i, col, '')

    output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')
    output_df['Primary Open Quantity'] = output_df['Primary Open Quantity'].apply(lambda x: "{:,.0f}".format(x))
    
    output_df['Trade Price'] = output_df['Trade Price'].round(2)
    
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])
    today = datetime.today()
    output_df['Days Elapsed'] = (today - output_df['Value Date']).dt.days 
    output_df[['Oblg Id', 'CashScore']] = output_df[['Oblg Id', 'CashScore']].fillna('NA')
    output_df = output_df[custom_column_order]
    output_df['CBBT_PX_ASK'] = "=" + 'BDP("' + output_df['ISIN Primary Instrument Reference'] + ' Corp",' + "G1" + ")"
    output_df['LQA (Liq Score)']= "="+'BDP("'+ output_df['ISIN Primary Instrument Reference'] + ' Corp",' + '"LQA_LIQUIDITY_SCORE")'

    
    output_df = output_df.map(lambda x: x.encode('unicode_escape').
                 decode('utf-8') if isinstance(x, str) else x)
    Final_df = Final_df.map(lambda x: x.encode('unicode_escape').
                 decode('utf-8') if isinstance(x, str) else x)

    
    #wb = load_workbook(output_filename)
    wb = openpyxl.load_workbook(r'Z:\FI E-Sales\Daily Fails\Gaurav\output.xlsm', read_only=False, keep_vba=True)

    # Write data to Excel file
    with pd.ExcelWriter(r'Z:\FI E-Sales\Daily Fails\Gaurav\output.xlsm', engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer  :
        
        # Filter data where operation type is Buy
        buy_df = output_df[output_df['Operation Type'].str.contains('BUY')]
        buy_df.to_excel(writer, index=False, sheet_name='Buy Data')

        # Filter data where operation type is Sell
        sell_df = output_df[output_df['Operation Type'].str.contains('SELL')]
        sell_df.to_excel(writer, index=False, sheet_name='Sell Data')

        output_df.to_excel(writer, index=False, sheet_name='Formatted All Data')
        Final_df.to_excel(writer, index=False, sheet_name='Raw Data')
    

    print("Output File Opened")


    print("Styling On Output File")
    wb = openpyxl.load_workbook('output.xlsm', read_only=False, keep_vba=True)

    ws_all_data = wb['Formatted All Data']

    new_column_series_2 = pd.Series(['USD','EUR','AUD','JPY','GBP'], name='Another New Column')

    max_column_index = ws_all_data.max_column

    for idx, value in enumerate(new_column_series_2, start=1):
        ws_all_data.cell(row=idx, column=max_column_index + 2, value=value)

    new_column_series = pd.Series(['1','=BDP("EURUSD BGN Curncy","PX_CLOSE_1D")','=BDP("AUDUSD BGN Curncy","PX_CLOSE_1D")','=BDP("JPYUSD BGN Curncy","PX_CLOSE_1D")','=BDP("GBPUSD BGN Curncy","PX_CLOSE_1D")'], name='New Column')
    max_column_index = ws_all_data.max_column

    for idx, value in enumerate(new_column_series, start=1):
        ws_all_data.cell(row=idx, column=max_column_index + 1, value=value)

    ws_buy_data = wb['Buy Data']

    new_column_series_2 = pd.Series(['USD','EUR','AUD','JPY','GBP'], name='Another New Column')

    max_column_index = ws_buy_data.max_column

    for idx, value in enumerate(new_column_series_2, start=1):
        ws_buy_data.cell(row=idx, column=max_column_index + 2, value=value)

    new_column_series = pd.Series(['1','=BDP("EURUSD BGN Curncy","PX_CLOSE_1D")','=BDP("AUDUSD BGN Curncy","PX_CLOSE_1D")','=BDP("JPYUSD BGN Curncy","PX_CLOSE_1D")','=BDP("GBPUSD BGN Curncy","PX_CLOSE_1D")'], name='New Column')
    max_column_index = ws_buy_data.max_column

    for idx, value in enumerate(new_column_series, start=1):
        ws_buy_data.cell(row=idx, column=max_column_index + 1, value=value)


    ws_sell_data = wb['Sell Data']

    new_column_series_2 = pd.Series(['USD','EUR','AUD','JPY','GBP'], name='Another New Column')

    max_column_index = ws_sell_data.max_column

    for idx, value in enumerate(new_column_series_2, start=1):
        ws_sell_data.cell(row=idx, column=max_column_index + 2, value=value)

    new_column_series = pd.Series(['1','=BDP("EURUSD BGN Curncy","PX_CLOSE_1D")','=BDP("AUDUSD BGN Curncy","PX_CLOSE_1D")','=BDP("JPYUSD BGN Curncy","PX_CLOSE_1D")','=BDP("GBPUSD BGN Curncy","PX_CLOSE_1D")'], name='New Column')
    max_column_index = ws_sell_data.max_column

    for idx, value in enumerate(new_column_series, start=1):
        ws_sell_data.cell(row=idx, column=max_column_index + 1, value=value)    


    # Economic Impact formula
    for sheet in wb.sheetnames:
        ws = wb[sheet]
        if ws== wb['Formatted All Data'] or ws== wb['Buy Data'] or ws==wb['Sell Data']:
            vlookup_range = "$T$1:$U$5"

            for row in range(1, ws.max_row + 1):
                # Skip the header row
                if row == 1:
                    continue
                formula = f"=(-(G{row}-F{row}))/100*L{row}*VLOOKUP(M{row},{vlookup_range},2,FALSE)"
                ws[f'H{row}'] = formula

    for sheet in wb.sheetnames:
        ws = wb[sheet]
        apply_styling(ws)
        border = Border(left=Side(border_style='thin', color="000000"),
                 right=Side(border_style='thin', color="000000"),
                 top=Side(border_style='thin', color="000000"),
                 bottom=Side(border_style='thin', color="000000"))
        for row in ws.iter_rows():
            for cell in row:
                cell.border = border


    wb.save(r'Z:\FI E-Sales\Daily Fails\Gaurav\output.xlsm')
    print("Sheets Named All Data, Buy Data, Sell Data")
    buy_data_rows = len(buy_df)
    sell_data_rows = len(sell_df)
    return  buy_data_rows, sell_data_rows

    

def generate_new_excel():
    # Read the output.xlsx file into a DataFrame
    master = pd.read_csv(master_path,encoding='unicode_escape')
    output_df = pd.read_excel(r'Z:\FI E-Sales\Daily Fails\Gaurav\output.xlsm', sheet_name='Formatted All Data')
    print("Output File Reaccessed")
    unique_counterparties = output_df[['Client', 'Oblg Id']].drop_duplicates()
    dfs = []
    total_fails_sum = 0

    # Iterate over unique counterparty names and obligorIds
    for index, row in unique_counterparties.iterrows():
        obligor_id = row['Oblg Id']
        counterparty = row['Client']

        cp_data = output_df[output_df['Client'] == counterparty]
        vd = len(cp_data[cp_data['Days Elapsed'] == 0])
        vd_plus_1 = len(cp_data[cp_data['Days Elapsed'] == 1])
        vd_plus_2 = len(cp_data[cp_data['Days Elapsed'] == 2])
        vd_plus_3 = len(cp_data[cp_data['Days Elapsed'] == 3])
        vd_plus_4 = len(cp_data[cp_data['Days Elapsed'] == 4])
        vd_plus_5 = len(cp_data[cp_data['Days Elapsed'] == 5])
        vd_plus_6 = len(cp_data[cp_data['Days Elapsed'] == 6])
        vd_plus_7 = len(cp_data[cp_data['Days Elapsed'] == 7])
        vd_gt_7 = len(cp_data[cp_data['Days Elapsed'] > 7])

        # Calculate total fails
        total_fails = vd+ vd_plus_1 + vd_plus_2 + vd_plus_3 + vd_plus_4 + vd_plus_5 +vd_plus_6+ vd_plus_7 + vd_gt_7
        total_fails_sum += total_fails

        # Create a DataFrame for the current counterparty
        cp_df = pd.DataFrame({'Oblg Id': [obligor_id],'Client': [counterparty],'Vd': [vd],'Vd+1': [vd_plus_1],'Vd+2': [vd_plus_2],'Vd+3': [vd_plus_3], 'Vd+4': [vd_plus_4],'Vd+5': [vd_plus_5],'Vd+6': [vd_plus_6], 'Vd+7': [vd_plus_7],'Vd>7': [vd_gt_7],'Total Fails': [total_fails]})

        # Append the DataFrame to the list
        dfs.append(cp_df)

    # Concatenate all DataFrames in the list
    new_excel_df = pd.concat(dfs, ignore_index=True)

    #sum of total
    new_excel_df.loc[len(new_excel_df)] = ['', '', '', '', '', '', '', '', '','', 'Total', total_fails_sum]
    output_filename = r'Z:\FI E-Sales\Daily Fails\Gaurav\output.xlsm'
    with pd.ExcelWriter(output_filename, mode='a', engine='openpyxl', if_sheet_exists='overlay') as writer:
        new_excel_df.to_excel(writer, index=False, sheet_name='Summary')
        #master.to_excel(writer, index=False, sheet_name='Raw Data')

    # Open the Excel file
    wb = openpyxl.load_workbook(r'Z:\FI E-Sales\Daily Fails\Gaurav\output.xlsm', read_only=False, keep_vba=True)
    ws = wb['Summary']

    # Apply styling
    apply_styling(ws)
    border = Border(left=Side(border_style='thin', color="000000"),
                right=Side(border_style='thin', color="000000"),
                top=Side(border_style='thin', color="000000"),
                bottom=Side(border_style='thin', color="000000"))
            # Apply borders to all cells
    for row in ws.iter_rows():
        for cell in row:
             if cell.value is not None:
                cell.border = border
                                                    
    # Apply conditional formatting to the last cell of "Total Fails" column
    last_row = ws.max_row
    total_fails_cell = ws.cell(row=last_row, column=ws.max_column)
    total_fails_cell.fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
    total_fails_cell.font = Font(color="FFFFFF", bold=True)

    # Apply conditional formatting to the last cell of "Vd>7" column
    last_row = ws.max_row
    vd_gt_7_cell = ws.cell(row=last_row, column=ws.max_column - 1)
    vd_gt_7_cell.fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
    vd_gt_7_cell.font = Font(color="FFFFFF", bold=True)

  
    columns_to_format = ['Vd', 'Vd+1', 'Vd+2', 'Vd+3', 'Vd+4', 'Vd+5', 'Vd+6', 'Vd+7', 'Vd>7']
    for column_name in columns_to_format:  
        column_index = None
        for cell in ws[1]:
            if cell.value == column_name:
                column_index = cell.column
                break
    
        if column_index:
            ws.column_dimensions[get_column_letter(column_index)].width = 6.5
            for row in ws.iter_rows(min_row=2):
                for cell in row:
                    if cell.column == column_index and isinstance(cell.value, int) and cell.value > 0:
                        cell.fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")
                        cell.font = Font(color="990000")
    wb.save(output_filename)
    print("Sheet Named Summary ")
    new_data_rows = len(new_excel_df)

    return new_data_rows



wb = openpyxl.load_workbook(r'Z:\FI E-Sales\Daily Fails\Gaurav\output.xlsm', read_only=False, keep_vba=True)

#sheet = wb.get_sheet_by_name('Buy Data')
sheet = wb["Buy Data"]
sheet.delete_cols(0,24)

#sheet = wb.get_sheet_by_name('Sell Data')
sheet = wb["Sell Data"]
sheet.delete_cols(0,24)

#sheet = wb.get_sheet_by_name('All Data')
sheet = wb["Formatted All Data"]
sheet.delete_cols(0,24)

#sheet = wb.get_sheet_by_name('Raw Data')
sheet = wb["Raw Data"]
sheet.delete_cols(0,36)

#sheet = wb.get_sheet_by_name('Summary')
sheet = wb["Summary"]
sheet.delete_cols(0,21)



wb.save('output.xlsm')

directory = r'Z:\FI E-Sales\Daily Fails\Gaurav'
extension = 'csv'
master_path = get_latest_file(directory, extension)

takara_path = r'Z:\FI E-Sales\Limit Breach\Takara.xlsx'
prodman_path = r'Z:\FI E-Sales\Limit Breach\ProductMappingData.xlsx'
buy_data_count, sell_data_count = generate_output(master_path, takara_path, prodman_path)    
time.sleep(10)
new_data_count = generate_new_excel()


print("Buy Data rows:", buy_data_count)
print("Sell Data rows:", sell_data_count)
print("Summary rows:", new_data_count)




import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from datetime import datetime
import random

# Read the master CSV file
master_df = pd.read_excel('master.xlsx')

# Read the merged data
merged_df = pd.read_excel('merged_data.xlsx')

# Merge the data based on 'Counterparty Name'
merged_output_df = pd.merge(master_df, merged_df[['Counterparty Name', 'ObligorId', 'CashScore']], on='Counterparty Name', how='left')

# Define selected columns
selected_columns = ['Counterparty Name', 'Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name', 'ObligorId', 'CashScore']

# Reorder columns and select required columns
output_df = merged_output_df[selected_columns]

# Define new columns
new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']

# Define the desired column order
custom_column_order = ['ObligorId','Counterparty Name', 'CashScore','Operation Type', 'Trade Date', 'Trade Price','CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)','Value Date','Days Elapsed','Primary Original Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name']

# Insert new columns at specific position
for i, col in enumerate(new_columns, start=1):
    output_df.insert(output_df.columns.get_loc('ObligorId') + i, col, '')

# Add dummy data to new columns
output_df['CBBT_PX_ASK'] = [random.randint(1, 100) for _ in range(len(output_df))]
output_df['Economic Impact'] = [random.uniform(-10000, 10000) for _ in range(len(output_df))]  # Generating some negative values for testing
output_df['LQA (Liq Score)'] = [random.uniform(1000, 10000) for _ in range(len(output_df))]

# Convert dates to string format
output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')

# Calculate days elapsed
output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])
today = datetime.today()
output_df['Days Elapsed'] = (today - output_df['Value Date']).dt.days - 1

# Fill NA for empty cells in new columns
output_df[['ObligorId', 'CashScore']] = output_df[['ObligorId', 'CashScore']].fillna('NA')

# Reorder columns based on custom_column_order
output_df = output_df[custom_column_order]

# Define output filename
output_filename = 'output.xlsx'

# Write data to Excel file with separate sheets for Buy and Sell data
with pd.ExcelWriter(output_filename) as writer:
    output_df.to_excel(writer, index=False, sheet_name='All Data')
    
    # Filter data where operation type is Buy
    buy_df = output_df[output_df['Operation Type'].str.contains('BUY')]
    buy_df.to_excel(writer, index=False, sheet_name='Buy Data')
    
    # Filter data where operation type is Sell
    sell_df = output_df[output_df['Operation Type'].str.contains('SELL')]
    sell_df.to_excel(writer, index=False, sheet_name='Sell Data')

# Read the output.xlsx file into a DataFrame
output_df = pd.read_excel(output_filename)

# Extract unique counterparty names and corresponding obligorIds
unique_counterparties = output_df[['Counterparty Name', 'ObligorId']].drop_duplicates()

# Create an empty list to store DataFrames for each counterparty
dfs = []

# Initialize variable for sum of total fails
total_fails_sum = 0

# Iterate over unique counterparty names and obligorIds
for index, row in unique_counterparties.iterrows():
    obligor_id = row['ObligorId']
    counterparty = row['Counterparty Name']
    
    cp_data = output_df[output_df['Counterparty Name'] == counterparty]
    
    # Calculate values for each date range
    vd = len(cp_data[cp_data['Days Elapsed'] == 0])  
    vd_plus_1 = len(cp_data[cp_data['Days Elapsed'] == 1])
    vd_plus_2 = len(cp_data[cp_data['Days Elapsed'] == 2])
    vd_plus_3 = len(cp_data[cp_data['Days Elapsed'] == 3])
    vd_plus_4 = len(cp_data[cp_data['Days Elapsed'] == 4])
    vd_plus_5 = len(cp_data[cp_data['Days Elapsed'] == 5])
    vd_plus_7 = len(cp_data[cp_data['Days Elapsed'] == 7])
    vd_gt_7 = len(cp_data[cp_data['Days Elapsed'] > 7])
    
    # Calculate total fails
    total_fails = vd_plus_1 + vd_plus_2 + vd_plus_3 + vd_plus_4 + vd_plus_5 + vd_plus_7 + vd_gt_7
    total_fails_sum += total_fails
    
    # Create a DataFrame for the current counterparty
    cp_df = pd.DataFrame({
        'ObligorId': [obligor_id],  # Add obligorId column
        'Counterparty Name': [counterparty],
        'Vd': [vd],
        'Vd+1': [vd_plus_1],
        'Vd+2': [vd_plus_2],
        'Vd+3': [vd_plus_3],
        'Vd+4': [vd_plus_4],
        'Vd+5': [vd_plus_5],
        'Vd+7': [vd_plus_7],
        'Vd>7': [vd_gt_7],
        'Total Fails': [total_fails]
    })
    
    # Append the DataFrame to the list
    dfs.append(cp_df)

# Concatenate all DataFrames in the list
new_excel_df = pd.concat(dfs, ignore_index=True)

# Replace cell values of 0 with '-'
new_excel_df = new_excel_df.replace({0: '-'})

# Append the sum of total fails at the end
new_excel_df.loc[len(new_excel_df)] = ['', '', '', '', '', '', '', '', '', 'Total', total_fails_sum]

# Save the new DataFrame to a new Excel file
new_sheet_name = 'Data Summary'
with pd.ExcelWriter(output_filename, mode='a', engine='openpyxl') as writer:
    new_excel_df.to_excel(writer, index=False, sheet_name=new_sheet_name)

# Open the Excel file
wb = load_workbook(output_filename)
ws = wb[new_sheet_name]

# Set header cells background color to RGB value (192, 0, 0)
header_fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
header_font = Font(color="FFFFFF", bold=True)  # Set font color to white and bold
for cell in ws[1]:
    cell.fill = header_fill
    cell.font = header_font

# Set conditional formatting color to RGB value (255, 199, 206)
condition_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

# Add cell borders to all cells
border = Border(left=Side(border_style='thin', color='000000'),
                right=Side(border_style='thin', color='000000'),
                top=Side(border_style='thin', color='000000'),
                bottom=Side(border_style='thin', color='000000'))

for row in ws.iter_rows():
    for cell in row:
        cell.border = border
        cell.alignment = Alignment(horizontal='right')  # Align cell content to the right

# Loop through all cells to set font color
for row in ws.iter_rows():
    for cell in row:
        if cell.fill == header_fill:
            cell.font = header_font

# Apply header style to the cell containing 'Total' in the 'Vd>7' column
vd_gt_7_total_cell = ws.cell(row=len(new_excel_df) + 1, column=new_excel_df.columns.get_loc('Vd>7') + 1)
vd_gt_7_total_cell.fill = header_fill
vd_gt_7_total_cell.font = header_font

# Apply header style to cells containing sum of total fails
total_fails_cell = ws.cell(row=len(new_excel_df) + 1, column=new_excel_df.columns.get_loc('Total Fails') + 1)
total_fails_cell.fill = header_fill
total_fails_cell.font = header_font

# Set column width to fit the content optimally
for column in ws.columns:
    max_length = 0
    column_values = [cell.value for cell in column if cell.value is not None]  # Exclude None values
    if column_values:
        max_length = max(len(str(cell)) for cell in column_values)
        column_letter = column[0].column_letter
        ws.column_dimensions[column_letter].width = max_length + 5  # Adding some extra space

# Save the modified Excel file
wb.save(output_filename)

import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Border, Side

# Read the output.csv file into a DataFrame
output_df = pd.read_csv('output.csv')

# Convert 'Value Date' to datetime format
output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])

# Extract unique counterparty names
unique_counterparties = output_df['Counterparty Name'].unique()

# Create an empty list to store DataFrames for each counterparty
dfs = []

# Initialize variables for sum of total fails and overall economic impact
total_fails_sum = 0
overall_economic_impact_sum = 0

# Iterate over unique counterparty names
for counterparty in unique_counterparties:
    cp_data = output_df[output_df['Counterparty Name'] == counterparty]
    
    # Calculate values for each date range
    vd = len(cp_data[cp_data['Days Elapsed'] != 0])  # Exclude days elapsed = 0
    vd_plus_1 = len(cp_data[cp_data['Days Elapsed'] == 1])
    vd_plus_2 = len(cp_data[cp_data['Days Elapsed'] == 2])
    vd_plus_3 = len(cp_data[cp_data['Days Elapsed'] == 3])
    vd_plus_4 = len(cp_data[cp_data['Days Elapsed'] == 4])
    vd_plus_5 = len(cp_data[cp_data['Days Elapsed'] == 5])
    vd_plus_7 = len(cp_data[cp_data['Days Elapsed'] == 7])
    vd_gt_7 = len(cp_data[cp_data['Days Elapsed'] > 7])
    
    # Calculate total fails
    total_fails = vd_plus_1 + vd_plus_2 + vd_plus_3 + vd_plus_4 + vd_plus_5 + vd_plus_7 + vd_gt_7
    total_fails_sum += total_fails
    
    # Calculate overall economic impact
    overall_economic_impact = cp_data['Economic Impact'].sum()
    overall_economic_impact_sum += overall_economic_impact
    
    # Create a DataFrame for the current counterparty
    cp_df = pd.DataFrame({
        'Counterparty Name': [counterparty],
        'Vd': [vd],
        'Vd+1': [vd_plus_1],
        'Vd+2': [vd_plus_2],
        'Vd+3': [vd_plus_3],
        'Vd+4': [vd_plus_4],
        'Vd+5': [vd_plus_5],
        'Vd+7': [vd_plus_7],
        'Vd>7': [vd_gt_7],
        'Total Fails': [total_fails],
        'Overall Economic Impact': [overall_economic_impact]
    })
    
    # Append the DataFrame to the list
    dfs.append(cp_df)

# Concatenate all DataFrames in the list
new_excel_df = pd.concat(dfs, ignore_index=True)

# Append the sum of total fails and overall economic impact at the end
new_excel_df.loc[len(new_excel_df)] = ['', '', '', '', '', '', '', '', 'Total', total_fails_sum, overall_economic_impact_sum]

# Save the new DataFrame to a new Excel file
output_filename = 'new_excel.xlsx'
new_excel_df.to_excel(output_filename, index=False)

# Open the Excel file
wb = load_workbook(output_filename)
ws = wb.active

# Set header cells background color to RGB value (192, 0, 0)
header_fill = PatternFill(start_color="C00000", end_color="C00000", fill_type="solid")
header_font = Font(color="FFFFFF", bold=True)  # Set font color to white and bold
for cell in ws[1]:
    cell.fill = header_fill
    cell.font = header_font

# Set conditional formatting color to RGB value (255, 199, 206)
condition_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")

# Add cell borders to all cells
border = Border(left=Side(border_style='thin', color='000000'),
                right=Side(border_style='thin', color='000000'),
                top=Side(border_style='thin', color='000000'),
                bottom=Side(border_style='thin', color='000000'))

for row in ws.iter_rows():
    for cell in row:
        cell.border = border

# Total Fails column
for i, value in enumerate(new_excel_df['Total Fails'], start=2):
    cell = ws.cell(row=i, column=new_excel_df.columns.get_loc('Total Fails') + 1)
    if value > 0:
        cell.fill = condition_fill

# Overall Economic Impact column
for i, value in enumerate(new_excel_df['Overall Economic Impact'], start=2):
    cell = ws.cell(row=i, column=new_excel_df.columns.get_loc('Overall Economic Impact') + 1)
    if value < 0:
        cell.fill = condition_fill

# Loop through all cells to set font color
for row in ws.iter_rows():
    for cell in row:
        if cell.fill == header_fill:
            cell.font = header_font
        elif cell.fill == condition_fill:
            cell.font = Font(color="C00000")  # Set font color to red

# Save the modified Excel file
wb.save(output_filename)

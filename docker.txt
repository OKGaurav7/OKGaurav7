import pandas as pd
import os
import glob

import openpyxl
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font, Border, Side, Alignment
from openpyxl.utils import get_column_letter
from datetime import datetime
import random
import pathlib
import win32com.client as client
from PIL import ImageGrab
import time


def get_latest_file(directory, extension):
    files = glob.glob(os.path.join(directory, f'*.{extension}'))
    latest_file = max(files, key=os.path.getmtime)
    return latest_file

def apply_styling(ws, header_fill_color="C00000", header_font_color="FFFFFF", condition_fill_color="FFC7CE", border_color="000000"):
    # Set header cells background color
    header_fill = PatternFill(start_color=header_fill_color, end_color=header_fill_color, fill_type="solid")
    header_font = Font(color=header_font_color, bold=True)


def generate_output(master_path, takara_path, prodman_path):
    master = pd.read_csv(master_path, on_bad_lines='skip')
    Takara = pd.read_excel(takara_path)
    prodman = pd.read_excel(prodman_path)
    abc_df = pd.merge(master, Takara, left_on='Counterparty RDM Id', right_on='externalId', how='left')
    merged_output_df = pd.merge(abc_df, prodman, left_on='currentObligorRdmId', right_on='ObligorId', how='left')
    Final_df=master.copy()
   
    selected_columns = ['Operation Type', 'Trade Date', 'Trade Price', 'Value Date', 'Primary Open Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name','currentObligorRdmId', 'currentObligorFullName', 'CashScore']

    output_df = merged_output_df[selected_columns]
    output_df=output_df.drop_duplicates()
    new_columns = ['CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)', 'Days Elapsed']
    output_df.rename(columns={'currentObligorRdmId':'Oblg Id', 'currentObligorFullName':'Client'},inplace=True)
    custom_column_order = ['Oblg Id','Client', 'CashScore','Operation Type', 'Trade Date', 'Trade Price','CBBT_PX_ASK', 'Economic Impact', 'LQA (Liq Score)','Value Date','Days Elapsed','Primary Open Quantity', 'Settlement Instrument Name', 'ISIN Primary Instrument Reference', 'Primary Instrument Long Name', 'SMO Trade Reference', 'Internal Status Narrative', 'Sales Person Name']
    
    for i, col in enumerate(new_columns, start=1):
        output_df.insert(output_df.columns.get_loc('Oblg Id') + i, col, '')

    output_df['Trade Date'] = pd.to_datetime(output_df['Trade Date']).dt.strftime('%Y-%m-%d')
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date']).dt.strftime('%Y-%m-%d')
    output_df['Primary Open Quantity'] = output_df['Primary Open Quantity'].apply(lambda x: "{:,.0f}".format(x))
    
    output_df['Trade Price'] = output_df['Trade Price'].round(2)
    
    output_df['Value Date'] = pd.to_datetime(output_df['Value Date'])
    today = datetime.today()
    output_df['Days Elapsed'] = (today - output_df['Value Date']).dt.days 
    output_df[['Oblg Id', 'CashScore']] = output_df[['Oblg Id', 'CashScore']].fillna('NA')
    output_df = output_df[custom_column_order]
    output_df['CBBT_PX_ASK'] = "=" + 'BDP("' + output_df['ISIN Primary Instrument Reference'] + ' Corp",' + "G1" + ")"
    output_df['LQA (Liq Score)']= "="+'BDP("'+ output_df['ISIN Primary Instrument Reference'] + ' Corp",' + '"LQA_LIQUIDITY_SCORE")'

    output_filename = r'kk.xlsx'
    
    # Load the existing Excel file
    wb = load_workbook(output_filename)
    print("Existing Excel File Opened")

    # Write data to the existing Excel file
    with pd.ExcelWriter(output_filename, engine='openpyxl', mode='a') as writer:  # mode='a' for append
        buy_df = output_df[output_df['Operation Type'].str.contains('BUY')]
        buy_df.to_excel(writer, index=False, sheet_name='Buy Data')
        sell_df = output_df[output_df['Operation Type'].str.contains('SELL')]
        sell_df.to_excel(writer, index=False, sheet_name='Sell Data')
        output_df.to_excel(writer, index=False, sheet_name='All Data')
        Final_df.to_excel(writer, index=False, sheet_name='Raw Data')
    
    print("Output File Appended")

    time.sleep(10)

    ws_all_data = wb['All Data']
    new_column_series_2 = pd.Series(['USD','EUR','AUD','JPY','GBP'], name='Another New Column')
    max_column_index = ws_all_data.max_column

    for idx, value in enumerate(new_column_series_2, start=1):
        ws_all_data.cell(row=idx, column=max_column_index + 2, value=value)

    new_column_series = pd.Series(['1','=BDP("EURUSD BGN Curncy","PX_CLOSE_1D")','=BDP("AUDUSD BGN Curncy","PX_CLOSE_1D")','=BDP("JPYUSD BGN Curncy","PX_CLOSE_1D")','=BDP("GBPUSD BGN Curncy","PX_CLOSE_1D")'], name='New Column')
    max_column_index = ws_all_data.max_column

    for idx, value in enumerate(new_column_series, start=1):
        ws_all_data.cell(row=idx, column=max_column_index + 1, value=value)

    ws_buy_data = wb['Buy Data']
    new_column_series_2 = pd.Series(['USD','EUR','AUD','JPY','GBP'], name='Another New Column')
    max_column_index = ws_buy_data.max_column

    for idx, value in enumerate(new_column_series_2, start=1):
        ws_buy_data.cell(row=idx, column=max_column_index + 2, value=value)

    new_column_series = pd.Series(['1','=BDP("EURUSD BGN Curncy","PX_CLOSE_1D")','=BDP("AUDUSD BGN Curncy","PX_CLOSE_1D")','=BDP("JPYUSD BGN Curncy","PX_CLOSE_1D")','=BDP("GBPUSD BGN Curncy","PX_CLOSE_1D")'], name='New Column')
    max_column_index = ws_buy_data.max_column

    for idx, value in enumerate(new_column_series, start=1):
        ws_buy_data.cell(row=idx, column=max_column_index + 1, value=value)

    ws_sell_data = wb['Sell Data']
    new_column_series_2 = pd.Series(['USD','EUR','AUD','JPY','GBP'], name='Another New Column')
    max_column_index = ws_sell_data.max_column

    for idx, value in enumerate(new_column_series_2, start=1):
        ws_sell_data.cell(row=idx, column=max_column_index + 2, value=value)

    new_column_series = pd.Series(['1','=BDP("EURUSD BGN Curncy","PX_CLOSE_1D")','=BDP("AUDUSD BGN Curncy","PX_CLOSE_1D")','=BDP("JPYUSD BGN Curncy","PX_CLOSE_1D")','=BDP("GBPUSD BGN Curncy","PX_CLOSE_1D")'], name='New Column')
    max_column_index = ws_sell_data.max_column

    for idx, value in enumerate(new_column_series, start=1):
        ws_sell_data.cell(row=idx, column=max_column_index + 1, value=value)    

    # Economic Impact formula
    for sheet in wb.sheetnames:
        ws = wb[sheet]
        if ws== wb['All Data'] or ws== wb['Buy Data'] or ws==wb['Sell Data']:
            vlookup_range = "$T$1:$U$5"

            for row in range(1, ws.max_row + 1):
                # Skip the header row
                if row == 1:
                    continue
                formula = f"=(-(G{row}-F{row}))/100*L{row}*VLOOKUP(M{row},{vlookup_range},2,FALSE)"
                ws[f'H{row}'] = formula

    for sheet in wb.sheetnames:
        ws = wb[sheet]
        apply_styling(ws)
        border = Border(left=Side(border_style='thin', color="000000"),
                 right=Side(border_style='thin', color="000000"),
                 top=Side(border_style='thin', color="000000"),
                 bottom=Side(border_style='thin', color="000000"))
        for row in ws.iter_rows():
            for cell in row:
                cell.border = border

        # Apply conditional formatting and adjust column width for 'CashScore'
        for cell in ws[1]:
            if cell.value == 'CashScore':
                cash_score_column = cell.column
                break
        if cash_score_column:
            ws.column_dimensions[get_column_letter(cash_score_column)].width = 10  

        # Apply conditional formatting and adjust column width for 'Operation Type'
        operation_type_column = None
        for cell in ws[1]:
            if cell.value == 'Operation Type':
                operation_type_column = cell.column
                break
        if operation_type_column:
            ws.column_dimensions[get_column_letter(operation_type_column)].width = 10  

        # Apply conditional formatting and adjust column width for 'Trade Date'
        trade_date_column = None
        for cell in ws[1]:
            if cell.value == 'Trade Date':
                trade_date_column = cell.column
                break
        if trade_date_column:
            ws.column_dimensions[get_column_letter(trade_date_column)].width = 11 
            for row in ws.iter_rows(min_row=2):
                for cell in row:
                    if cell.column == trade_date_column:
                        cell.alignment = Alignment(horizontal='right') 
        
        # Apply conditional formatting to column "Trade Price"
        trade_price_column = None
        for cell in ws[1]:
            if cell.value == 'Trade Price':
                trade_price_column = cell.column
                break
        if trade_price_column:
            ws.column_dimensions[get_column_letter(trade_price_column)].width = 7 

        # Apply conditional formatting and adjust column width for 'Value Date'
        value_date_column = None
        for cell in ws[1]:
            if cell.value == 'Value Date':
                value_date_column = cell.column
                break
        if value_date_column:
            ws.column_dimensions[get_column_letter(value_date_column)].width = 11  

        # Apply conditional formatting and adjust column width for 'Primary Original Quantity'
        quantity_column = None
        for cell in ws[1]:
            if cell.value == 'Primary Open Quantity':
                quantity_column = cell.column
                break
        if quantity_column:
            ws.column_dimensions[get_column_letter(quantity_column)].width = 15
            for row in ws.iter_rows(min_row=2):
                for cell in row:
                    if cell.column == quantity_column:
                        cell.alignment = Alignment(horizontal='right')  

        # Apply conditional formatting and adjust column width for 'Settlement Instrument Name'
        settlement_column = None
        for cell in ws[1]:
            if cell.value == 'Settlement Instrument Name':
                settlement_column = cell.column
                break
        if settlement_column:
            ws.column_dimensions[get_column_letter(settlement_column)].width = 17  

        isin_column = None
        for cell in ws[1]:
            if cell.value == 'ISIN Primary Instrument Reference':
                isin_column = cell.column
                break
        if isin_column:
            ws.column_dimensions[get_column_letter(isin_column)].width = 21 

        instrument_name_column = None
        for cell in ws[1]:
            if cell.value == 'Primary Instrument Long Name':
                instrument_name_column = cell.column
                break
        if instrument_name_column:
            ws.column_dimensions[get_column_letter(instrument_name_column)].width = 50

        # Apply conditional formatting and adjust column width for 'SMO Trade Reference'
        smo_trade_column = None
        for cell in ws[1]:
            if cell.value == 'SMO Trade Reference':
                smo_trade_column = cell.column
                break
        if smo_trade_column:
            ws.column_dimensions[get_column_letter(smo_trade_column)].width = 11  
        internal_status_column = None
        for cell in ws[1]:
            if cell.value == 'Internal Status Narrative':
                internal_status_column = cell.column
                break
        if internal_status_column:
            ws.column_dimensions[get_column_letter(internal_status_column)].width = 40  
        sales_person_column = None
        for cell in ws[1]:
            if cell.value == 'Sales Person Name':
                sales_person_column = cell.column
                break
        if sales_person_column:
            ws.column_dimensions[get_column_letter(sales_person_column)].width = 19 

    wb.save(output_filename)
    buy_data_rows = len(buy_df)
    sell_data_rows = len(sell_df)
    return  buy_data_rows, sell_data_rows

    

def generate_new_excel():
    # Read the output.xlsx file into a DataFrame
    master = pd.read_csv(master_path,encoding='unicode_escape')
    output_df = pd.read_excel(r'kk.xlsx', sheet_name='All Data')
    
    unique_counterparties = output_df[['Client', 'Oblg Id']].drop_duplicates()
    dfs = []
    total_fails_sum = 0

    # Iterate over unique counterparty names and obligorIds
    for index, row in unique_counterparties.iterrows():
        obligor_id = row['Oblg Id']
        counterparty = row['Client']

        cp_data = output_df[output_df['Client'] == counterparty]
        vd = len(cp_data[cp_data['Days Elapsed'] == 0])
        vd_plus_1 = len(cp_data[cp_data['Days Elapsed'] == 1])
        vd_plus_2 = len(cp_data[cp_data['Days Elapsed'] == 2])
        vd_plus_3 = len(cp_data[cp_data['Days Elapsed'] == 3])
        vd_plus_4 = len(cp_data[cp_data['Days Elapsed'] == 4])
        vd_plus_5 = len(cp_data[cp_data['Days Elapsed'] == 5])
        vd_plus_6 = len(cp_data[cp_data['Days Elapsed'] == 6])
        vd_plus_7 = len(cp_data[cp_data['Days Elapsed'] == 7])
        vd_gt_7 = len(cp_data[cp_data['Days Elapsed'] > 7])

        # Calculate total fails
        total_fails = vd+ vd_plus_1 + vd_plus_2 + vd_plus_3 + vd_plus_4 + vd_plus_5 +vd_plus_6+ vd_plus_7 + vd_gt_7
        total_fails_sum += total_fails

        # Create a DataFrame for the current counterparty
        cp_df = pd.DataFrame({'Oblg Id': [obligor_id],'Client': [counterparty],'Vd': [vd],'Vd+1': [vd_plus_1],'Vd+2': [vd_plus_2],'Vd+3': [vd_plus_3], 'Vd+4': [vd_plus_4],'Vd+5': [vd_plus_5],'Vd+6': [vd_plus_6], 'Vd+7': [vd_plus_7],'Vd>7': [vd_gt_7],'Total Fails': [total_fails]})

        # Append the DataFrame to the list
        dfs.append(cp_df)

    # Concatenate all DataFrames in the list
    new_excel_df = pd.concat(dfs, ignore_index=True)

    #sum of total
    new_excel_df.loc[len(new_excel_df)] = ['', '', '', '', '', '', '', '', '','', 'Total', total_fails_sum]
    output_filename = r'kk.xlsx'
    with pd.ExcelWriter(output_filename, mode='a', engine='openpyxl') as writer:
        new_excel_df.to_excel(writer, index=False, sheet_name='Summary')
        #master.to_excel(writer, index=False, sheet_name='Raw Data')

    # Open the Excel file
    wb = load_workbook(output_filename)
    ws = wb['Summary']

    # Apply styling
    apply_styling(ws)
    border = Border(left=Side(border_style='thin', color="000000"),
                   right=Side(border_style='thin', color="000000"),
                   top=Side(border_style='thin', color="000000"),
                   bottom=Side(border_style='thin', color="000000"))
    for row in ws.iter_rows():
        for cell in row:
            cell.border = border

        # Apply conditional formatting and adjust column width
        for cell in ws[1]:
            if cell.value == 'Client':
                client_column = cell.column
                break
        if client_column:
            ws.column_dimensions[get_column_letter(client_column)].width = 40 

        # Apply conditional formatting and adjust column width
        for cell in ws[1]:
            if cell.value == 'Oblg Id':
                obligor_column = cell.column
                break
        if obligor_column:
            ws.column_dimensions[get_column_letter(obligor_column)].width = 20 

    # Save the Excel file
    wb.save(output_filename)
    return output_filename

# Example usage:
master_path = r'C:\Users\path\to\master.csv'
takara_path = r'C:\Users\path\to\takara.xlsx'
prodman_path = r'C:\Users\path\to\prodman.xlsx'

buy_rows, sell_rows = generate_output(master_path, takara_path, prodman_path)
generate_new_excel()


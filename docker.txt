import pandas as pd
from itertools import combinations

# Read the CSV file
df = pd.read_csv("Gap Metrics.csv")

# Create a new DataFrame to store the output
output_df = pd.DataFrame(columns=df.columns)

# Columns to retain
columns_to_retain = ['cNameEMA_x', 'Username', 'primaryProduct_x', 'platform_x', 'countryCode']

# Track existing rows based on the specified columns
existing_rows = set()

# Iterate over each row in the original DataFrame
for _, row in df.iterrows():
    # Create a key based on the specified columns
    key = tuple(row[col] for col in columns_to_retain)
    # Add the key to the set of existing rows
    existing_rows.add(key)

# Iterate over each unique combination of 'cNameEMA_x' and 'primaryProduct_x'
for index, group in df.groupby(['cNameEMA_x', 'primaryProduct_x']):
    # Get unique country codes for this group
    country_codes = group['countryCode'].unique()
    # Remove "All" from country codes
    country_codes = [code for code in country_codes if code != 'All']

    # Generate combinations of country codes
    for r in range(1, len(country_codes) + 1):
        for comb in combinations(country_codes, r):
            # Create a new row with the current combination
            new_row = group.iloc[0].copy()
            new_row['countryCode'] = ', '.join(comb)
            # Empty all other columns except the specified ones
            for col in new_row.index:
                if col not in columns_to_retain:
                    new_row[col] = ''
            # Check if the row already exists
            key = tuple(new_row[col] for col in columns_to_retain)
            if key not in existing_rows:
                # Calculate the average dv_shown based on matching rows in the original DataFrame
                matching_rows = df[(df['cNameEMA_x'] == new_row['cNameEMA_x']) &
                                   (df['primaryProduct_x'] == new_row['primaryProduct_x']) &
                                   (df['countryCode'].isin(comb))]
                avg_dv_shown = matching_rows['dv_shown'].mean()
                new_row['dv_shown'] = avg_dv_shown if not pd.isnull(avg_dv_shown) else ''
                # Add the row to the output DataFrame
                output_df = pd.concat([output_df, pd.DataFrame([new_row])], ignore_index=True)

# Append the original DataFrame to the output DataFrame
output_df = pd.concat([output_df, df], ignore_index=True)

# Save the output to a new CSV file
output_df.to_csv("output.csv", index=False)
